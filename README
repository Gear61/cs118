USEFUL LINKS:
SPEC: http://irl.cs.ucla.edu/~yingdi/cs118/proj1.html
PRINCETON SPEC: http://www.cs.princeton.edu/courses/archive/spring13/cos461/assignments-proxy.html#Assignment_Details
NETWORK PROGRAMMING GUIDE: http://beej.us/guide/bgnet/output/html/multipage/index.html
OUR REPOSITORY: https://github.com/Gear61/cs118

HOW TO USE GIT

BEFORE YOU START WORKING ON ANYTHING, MAKE SURE TO RUN git pull.
BEFORE YOU PUSH ANYTHING, MAKE SURE TO RUN ./waf distclean!
TO GET THE IP ADDRESS OF YOUR MACHINE: hostname -i

Let's say we are making changes to the same file. You've added some stuff of your own, but you don't know if someone has updated the file 
since you last pulled. You want to MERGE your changes with theirs. Here's what you do:

1. 'git stash'
2. 'git pull'
3. Enter in something for merge message. Boom, you now have a merged version local to your machine.
4. 'git add (the file)'
5. 'git commit -m your comment here'
4. 'git push' to push this merged version.

You want to push new changes, and you know that nobody has made changes to the file you're working on since you last pulled it. 
Do these things:

1. 'git add (file(s) you edited)'
2. 'git commit -m your message here'. Write something meaningful for the commit message please.
6. 'git push' to update the repository.

HOW TO COMPILE STUFF
1. ./waf configure
2. ./waf
3. Your executable is in the newly created build directory. It is named http-proxy. Run that shit. (./build/http-proxy)

General
=======

To learn more about ./waf, refer to http://code.google.com/p/waf/
and http://waf.googlecode.com/svn/docs/wafbook/single.html

Ideally, you will need only to add your source files in wscript, which is basically a Python program.

How to use skeleton
===================

Due to restrictions on lnxsrv, several steps necessary to compile and run (if you're using this skeleton):

1. The following lines should be added to your ~/.bashrc

export PATH=/usr/local/cs/bin:$PATH
export LD_LIBRARY_PATH=/u/cs/grad/yingdi/boost/lib:/usr/local/lib64/:$LD_LIBRARY_PATH

2. To configure environment

./waf configure

If there are any errors, please email me.

3. To build/rebuild the code

./waf

4. All compiled executables are located in build/, so you can run them as this:

build/http-proxy

